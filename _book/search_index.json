[
["index.html", "Title Preface", " Title author Last compiled 2020-08-20 Preface Crump, Matthew J. C. (2017). Programming for Psychologists: Data Creation and Analysis (Version 1.1). https://crumplab.github.io/programmingforpsych/ This textbook is a collection of notes for a course on programming for psychologists, taught at the Graduate Center of CUNY, by Matthew Crump. Contributing to the textbook Use Hypothes.is, an amazing tool for annotating the web. Go to Hypothes.is, and “get-started” Install the the add-on for chrome, or other browser That’s it, turn on Hypothes.is when you are reading this textbook, and you will see all public annotations made by anyone else. The source code for this textbook is available in my github repo programmingforpsych Edit the .Rmd files, and push them back The edit link in the top bar of the textbook should automatically take you to the source .Rmd file License CC BY-SA 4.0 license The book is released under a creative commons CC BY-SA 4.0 license. This means that this book can be reused, remixed, retained, revised and redistributed (including commercially) as long as appropriate credit is given to the authors. If you remix, or modify the original version of this open textbook, you must redistribute all versions of this open textbook under the same license - CC BY-SA 4.0. "],
["fundamentals-of-computer-programming-languages.html", "Chapter 1 Fundamentals of Computer Programming Languages 1.1 Why should Psychologists learn to program?", " Chapter 1 Fundamentals of Computer Programming Languages If you’ve never programmed a computer, you should. There’s nothing like it in the whole world. When you program a computer, it does exactly what you tell it to do. It’s like designing a machine-any machine, like a car, like a faucet, like a gas-hinge for a door-using math and instructions. It’s awesome in the truest sense: it can fill you with awe. —Cory Doctorow 1.1 Why should Psychologists learn to program? The benefits of learning to program for Psychologists are numerous. Programming makes data-analysis more efficient, accurate, and transparent; and, opens new doors for new analyses that would not be practical or possible without programming. Experiments are often run on computers, so programming is important for designing, creating, and implementing experiments themselves. Programs can be written to formally express psychological theories, so programming can also help a researcher iron out and clearly express their own ideas about psychological processes. Experiment builders Eprime Presentation Superlab PsychoPy Open Sesame Qualtrics More on wikipedia Statistics Software SPSS SAS JMP R Julia Matlab Computing technology plays an important role in psychological research, and there are many kinds of proprietary software The website Rosetta Code lists many common programming problems and solutions for them across many different languages. It’s a great resource to get a sense of the breadth of programming languages, for examples of working code, and for problems to solve when learning to program. 1.1.1 Algorithms Here are some questions you should have about algorithms. What are algorithms? What is algorithmic thinking/ what is an algorithmic approach to problem solving? How do you combine the programming concepts in the next sections to write algorithms for solving problems with code? How would you explain the concept of an algorithm to another person? And, can the problem I am trying to solve be answered with an algorithmic approach. An algorithm is simply a set of detailed instructions for accomplishing a task, or the infallible recipe for solving a problem. If the step-by-step instructions are followed exactly, the algorithm will always provide the answer to the problem it was intended to solve. Real-world examples of algorithms are recipes for preparing food, or IKEA instructions for putting together furniture. Figure 1.1: Algorithm for fixing a lamp, from the Swedish picture dictionary "]
]
